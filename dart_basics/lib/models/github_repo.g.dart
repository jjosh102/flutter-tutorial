// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'github_repo.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Owner _$OwnerFromJson(Map<String, dynamic> json) => Owner(
  login: json['login'] as String,
  id: (json['id'] as num).toInt(),
  nodeId: json['nodeId'] as String?,
  avatarUrl: json['avatarUrl'] as String?,
  gravatarId: json['gravatarId'] as String?,
  url: json['url'] as String,
  htmlUrl: json['htmlUrl'] as String?,
  followersUrl: json['followersUrl'] as String?,
  followingUrl: json['followingUrl'] as String?,
  gistsUrl: json['gistsUrl'] as String?,
  starredUrl: json['starredUrl'] as String?,
  subscriptionsUrl: json['subscriptionsUrl'] as String?,
  organizationsUrl: json['organizationsUrl'] as String?,
  reposUrl: json['reposUrl'] as String?,
  eventsUrl: json['eventsUrl'] as String?,
  receivedEventsUrl: json['receivedEventsUrl'] as String?,
  type: json['type'] as String?,
  userViewType: json['userViewType'] as String?,
  siteAdmin: json['siteAdmin'] as bool?,
);

Map<String, dynamic> _$OwnerToJson(Owner instance) => <String, dynamic>{
  'login': instance.login,
  'id': instance.id,
  'nodeId': instance.nodeId,
  'avatarUrl': instance.avatarUrl,
  'gravatarId': instance.gravatarId,
  'url': instance.url,
  'htmlUrl': instance.htmlUrl,
  'followersUrl': instance.followersUrl,
  'followingUrl': instance.followingUrl,
  'gistsUrl': instance.gistsUrl,
  'starredUrl': instance.starredUrl,
  'subscriptionsUrl': instance.subscriptionsUrl,
  'organizationsUrl': instance.organizationsUrl,
  'reposUrl': instance.reposUrl,
  'eventsUrl': instance.eventsUrl,
  'receivedEventsUrl': instance.receivedEventsUrl,
  'type': instance.type,
  'userViewType': instance.userViewType,
  'siteAdmin': instance.siteAdmin,
};

License _$LicenseFromJson(Map<String, dynamic> json) => License(
  key: json['key'] as String,
  name: json['name'] as String?,
  spdxId: json['spdxId'] as String?,
  url: json['url'] as String?,
  nodeId: json['nodeId'] as String?,
);

Map<String, dynamic> _$LicenseToJson(License instance) => <String, dynamic>{
  'key': instance.key,
  'name': instance.name,
  'spdxId': instance.spdxId,
  'url': instance.url,
  'nodeId': instance.nodeId,
};

GithubRepo _$GithubRepoFromJson(Map<String, dynamic> json) => GithubRepo(
  id: (json['id'] as num).toInt(),
  nodeId: json['nodeId'] as String?,
  name: json['name'] as String?,
  fullName: json['fullName'] as String?,
  isPrivate: json['isPrivate'] as bool?,
  owner: Owner.fromJson(json['owner'] as Map<String, dynamic>),
  htmlUrl: json['htmlUrl'] as String?,
  description: json['description'] as String?,
  isFork: json['isFork'] as bool?,
  url: json['url'] as String,
  forksUrl: json['forksUrl'] as String?,
  keysUrl: json['keysUrl'] as String?,
  collaboratorsUrl: json['collaboratorsUrl'] as String?,
  teamsUrl: json['teamsUrl'] as String?,
  hooksUrl: json['hooksUrl'] as String?,
  issueEventsUrl: json['issueEventsUrl'] as String?,
  eventsUrl: json['eventsUrl'] as String?,
  assigneesUrl: json['assigneesUrl'] as String?,
  branchesUrl: json['branchesUrl'] as String?,
  tagsUrl: json['tagsUrl'] as String?,
  blobsUrl: json['blobsUrl'] as String?,
  gitTagsUrl: json['gitTagsUrl'] as String?,
  gitRefsUrl: json['gitRefsUrl'] as String?,
  treesUrl: json['treesUrl'] as String?,
  statusesUrl: json['statusesUrl'] as String?,
  languagesUrl: json['languagesUrl'] as String?,
  stargazersUrl: json['stargazersUrl'] as String?,
  contributorsUrl: json['contributorsUrl'] as String?,
  subscribersUrl: json['subscribersUrl'] as String?,
  subscriptionUrl: json['subscriptionUrl'] as String?,
  commitsUrl: json['commitsUrl'] as String?,
  gitCommitsUrl: json['gitCommitsUrl'] as String?,
  commentsUrl: json['commentsUrl'] as String?,
  issueCommentUrl: json['issueCommentUrl'] as String?,
  contentsUrl: json['contentsUrl'] as String?,
  compareUrl: json['compareUrl'] as String?,
  mergesUrl: json['mergesUrl'] as String?,
  archiveUrl: json['archiveUrl'] as String?,
  downloadsUrl: json['downloadsUrl'] as String?,
  issuesUrl: json['issuesUrl'] as String?,
  pullsUrl: json['pullsUrl'] as String?,
  milestonesUrl: json['milestonesUrl'] as String?,
  notificationsUrl: json['notificationsUrl'] as String?,
  labelsUrl: json['labelsUrl'] as String?,
  releasesUrl: json['releasesUrl'] as String?,
  deploymentsUrl: json['deploymentsUrl'] as String?,
  createdAt: json['createdAt'] != null
      ? DateTime.parse(json['createdAt'])
      : DateTime.fromMillisecondsSinceEpoch(0),

  updatedAt: json['updatedAt'] != null
      ? DateTime.parse(json['updatedAt'])
      : DateTime.fromMillisecondsSinceEpoch(0),

  pushedAt: json['pushedAt'] != null
      ? DateTime.parse(json['pushedAt'])
      : DateTime.fromMillisecondsSinceEpoch(0),
  gitUrl: json['gitUrl'] as String?,
  sshUrl: json['sshUrl'] as String?,
  cloneUrl: json['cloneUrl'] as String?,
  svnUrl: json['svnUrl'] as String?,
  homepage: json['homepage'] as String?,
  size: (json['size'] as num).toInt(),
  stargazersCount: (json['stargazersCount'] as num?)?.toInt() ?? 0,
  watchersCount: (json['watchersCount'] as num?)?.toInt() ?? 0,
  language: json['language'] as String?,
  hasIssues: json['hasIssues'] as bool?,
  hasProjects: json['hasProjects'] as bool?,
  hasDownloads: json['hasDownloads'] as bool?,
  hasWiki: json['hasWiki'] as bool?,
  hasPages: json['hasPages'] as bool?,
  hasDiscussions: json['hasDiscussions'] as bool?,
  forksCount: (json['forksCount'] as num?)?.toInt() ?? 0,
  mirrorUrl: json['mirrorUrl'],
  archived: json['archived'] as bool,
  disabled: json['disabled'] as bool,
  openIssuesCount: (json['openIssuesCount'] as num?)?.toInt() ?? 0,
  license: json['license'] == null
      ? null
      : License.fromJson(json['license'] as Map<String, dynamic>),
  allowForking: json['allowForking'] as bool?,
  isTemplate: json['isTemplate'] as bool?,
  webCommitSignoffRequired: json['webCommitSignoffRequired'] as bool?,
  topics: (json['topics'] as List<dynamic>).map((e) => e as String).toList(),
  visibility: json['visibility'] as String,
  forks: (json['forks'] as num).toInt(),
  openIssues: (json['openIssues'] as num?)?.toInt() ?? 0,
  watchers: (json['watchers'] as num?)?.toInt() ?? 0,
  defaultBranch: json['defaultBranch'] as String?,
  tempCloneToken: json['tempCloneToken'],
  networkCount: (json['networkCount'] as num?)?.toInt() ?? 0,
  subscribersCount: (json['subscribersCount'] as num?)?.toInt() ?? 0,
);

Map<String, dynamic> _$GithubRepoToJson(GithubRepo instance) =>
    <String, dynamic>{
      'id': instance.id,
      'nodeId': instance.nodeId,
      'name': instance.name,
      'fullName': instance.fullName,
      'isPrivate': instance.isPrivate,
      'owner': instance.owner.toJson(),
      'htmlUrl': instance.htmlUrl,
      'description': instance.description,
      'isFork': instance.isFork,
      'url': instance.url,
      'forksUrl': instance.forksUrl,
      'keysUrl': instance.keysUrl,
      'collaboratorsUrl': instance.collaboratorsUrl,
      'teamsUrl': instance.teamsUrl,
      'hooksUrl': instance.hooksUrl,
      'issueEventsUrl': instance.issueEventsUrl,
      'eventsUrl': instance.eventsUrl,
      'assigneesUrl': instance.assigneesUrl,
      'branchesUrl': instance.branchesUrl,
      'tagsUrl': instance.tagsUrl,
      'blobsUrl': instance.blobsUrl,
      'gitTagsUrl': instance.gitTagsUrl,
      'gitRefsUrl': instance.gitRefsUrl,
      'treesUrl': instance.treesUrl,
      'statusesUrl': instance.statusesUrl,
      'languagesUrl': instance.languagesUrl,
      'stargazersUrl': instance.stargazersUrl,
      'contributorsUrl': instance.contributorsUrl,
      'subscribersUrl': instance.subscribersUrl,
      'subscriptionUrl': instance.subscriptionUrl,
      'commitsUrl': instance.commitsUrl,
      'gitCommitsUrl': instance.gitCommitsUrl,
      'commentsUrl': instance.commentsUrl,
      'issueCommentUrl': instance.issueCommentUrl,
      'contentsUrl': instance.contentsUrl,
      'compareUrl': instance.compareUrl,
      'mergesUrl': instance.mergesUrl,
      'archiveUrl': instance.archiveUrl,
      'downloadsUrl': instance.downloadsUrl,
      'issuesUrl': instance.issuesUrl,
      'pullsUrl': instance.pullsUrl,
      'milestonesUrl': instance.milestonesUrl,
      'notificationsUrl': instance.notificationsUrl,
      'labelsUrl': instance.labelsUrl,
      'releasesUrl': instance.releasesUrl,
      'deploymentsUrl': instance.deploymentsUrl,
      'createdAt': instance.createdAt.toIso8601String(),
      'updatedAt': instance.updatedAt.toIso8601String(),
      'pushedAt': instance.pushedAt.toIso8601String(),
      'gitUrl': instance.gitUrl,
      'sshUrl': instance.sshUrl,
      'cloneUrl': instance.cloneUrl,
      'svnUrl': instance.svnUrl,
      'homepage': instance.homepage,
      'size': instance.size,
      'stargazersCount': instance.stargazersCount,
      'watchersCount': instance.watchersCount,
      'language': instance.language,
      'hasIssues': instance.hasIssues,
      'hasProjects': instance.hasProjects,
      'hasDownloads': instance.hasDownloads,
      'hasWiki': instance.hasWiki,
      'hasPages': instance.hasPages,
      'hasDiscussions': instance.hasDiscussions,
      'forksCount': instance.forksCount,
      'mirrorUrl': instance.mirrorUrl,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'openIssuesCount': instance.openIssuesCount,
      'license': instance.license?.toJson(),
      'allowForking': instance.allowForking,
      'isTemplate': instance.isTemplate,
      'webCommitSignoffRequired': instance.webCommitSignoffRequired,
      'topics': instance.topics,
      'visibility': instance.visibility,
      'forks': instance.forks,
      'openIssues': instance.openIssues,
      'watchers': instance.watchers,
      'defaultBranch': instance.defaultBranch,
      'tempCloneToken': instance.tempCloneToken,
      'networkCount': instance.networkCount,
      'subscribersCount': instance.subscribersCount,
    };
